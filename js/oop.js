// Problem #2: OOP

//Please write a class structure (in the language of your choosing, 
//such as: C#, JAVA, JavaScript, PHP) that describes the following objects and their properties/functions.
var Animal = function(age){
    this.Age = age;
    Animal.prototype.Eat = function(){
        console.log('Num num num');
    }
    Animal.prototype.Sleep = function(){
        console.log('Zzzzzzz');
    }
}
var FlyAnimal = function(){
    FlyAnimal.prototype.Fly = function(){
        console.log('Whoo Hooo!');
    }
}

var SwimAnimal = function(){
    SwimAnimal.prototype.Swim = function(){
        console.log('Splah');
    }
}

var AttackAnimal = function(){
    AttackAnimal.prototype.Attack = function(){
        console.log('POW!');
    }
}

var SoundAnimal = function(){
    SoundAnimal.prototype.Roar = function(){
        console.log('Rahhhh!');
    }
}

var bee = new Animal(2);
FlyAnimal.prototype = bee;
bee = new FlyAnimal();

console.log('Bee ' + bee.Age);
bee.Eat();
bee.Sleep();
bee.Fly();
console.log('---------------------');

var lion = new Animal(3);
AttackAnimal.prototype = lion;
lion = new AttackAnimal();
SoundAnimal.prototype = lion;
lion = new SoundAnimal();

console.log('lion '+ lion.Age);
lion.Eat();
lion.Sleep();
lion.Roar();
lion.Attack();
console.log('---------------------');


var dolphin = new Animal(4);
SwimAnimal.prototype = dolphin;
dolphin = new SwimAnimal();

console.log('dolphin ' + dolphin.Age);
dolphin.Eat();
dolphin.Sleep();
dolphin.Swim();
console.log('---------------------');


var eagle = new Animal(4);
FlyAnimal.prototype = eagle;
eagle = new FlyAnimal();
AttackAnimal.prototype = eagle;
eagle = new AttackAnimal();

console.log('eagle '+ eagle.Age);
eagle.Eat();
eagle.Sleep();
eagle.Fly();
eagle.Attack();
console.log('---------------------');


//Problem #3: Cross-Domain Behavior

//Assuming two pages exist under two different sub domains; one page is included inside the other one, using an iframe. 
//The parent page’s URL is: a.mydomain.com
//The inner page’s URL is: b.mydomain.com
//Question
//Is it possible for the parent page to call a JavaScript function of the inner page?
//Yes or no, please explain the answer.

/*
    Yes! It is possible
    Have to use contentWindow property which returns the Window object generated by an iframe element.
    Then we have access to all methods inside iframe;
    Example:
     document.getElementById('my_iframe').contentWindow.innerFunction();
*/

//Problem #4: Asset Loading

//Describe in your own words the differences between Pre-loading and Lazy-loading.
//What are the advantages and disadvantages of each approach?
//In what cases is one better than the other?
//Is there a better approach than the two? If so, describe it, along with its advantages and disadvantages.


/*
    Pre-loading and Lazy-Loading are commonly used to describe the way images (or any other objects) are loaded in web page.

     - Pre-Loading: load all objects that our application will need at first time the page is loaded. This might make application
       respond fast, but will slow down startup of the page as take up more space at runtime because we are keeping objects that we
       may not need for some time.

    -  Lazy-Loading: load the objects when we need it. This may produce some latency from the request that triggered the load to showing requested object, But will reduces startup time of the page and memory requirements.
       Pre-Loading is better to use when web application have not so many object (images). The runtime will be not so big and respond to the object will be instant.
       Lazy-Loading is better to use when we have big number of objects. The runtime will be much slower in comparison of pre-loader because at first time we see only object that are need. Other object have to wait some event, request to show.


       //Is there a better approach than the two? If so, describe it, along with its advantages and disadvantages?

       If we have huge number of objects better approach is to split resources to different pages. in Each page we can use pre-load or
       lazy-load or combination of them.

*/